{
	"Create useState": {
		"prefix": "useState",
		"body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})",
		"description": "Create useState"
	},
	"Create useState with Type": {
		"prefix": "tuseState",
		"body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:Type}>(${3:initialState})",
		"description": "Create useState with Type"
	},
	"Create useReducer State Type and State": {
	"prefix": "tstate",
	"body": [
		"type ${1/(.*)/${1:/capitalize}/}State = {",
		"  ${2}",
		"}",
		"",
		"const ${3}State: ${1/(.*)/${1:/capitalize}/}State = {",
		"  ${4}",
		"}",
		"",
	],
	"description": "Create useReducer Action Type"
},
"Create useReducer Action Type": {
	"prefix": "taction",
	"body": [
		"type ${1/(.*)/${1:/capitalize}/}Action = {",
		"  type: ${2};",
		"  payload: ${3};",
		"} | {",
		"   type: ${4};",
		"   payload: ${5}",
		"}",
		"",
	],
	"description": "Create useReducer Action Type"
},
"Create useReducer Reducer": {
	"prefix": "reducer",
	"body": [
		"const ${1}reducer = (state: ${2}State, action: ${3}Action) => {",
		"  switch(action.type) {",
		"    case \"${4}\":",
		"      return ${5}",
		"    default:",
		"      return state",
		"  }",
		"}",
		""
	],
	"description": "Create useReducer Reducer"
},
"Create useReducer": {
	"prefix": "useReducer",
	"body": [
		"const [${1:state}, ${2:dispatch}] = useReducer(${3}reducer, initial{$4}State)"
	],
	"description": "Create useReducer"
},
	"Create Interface": {
		"prefix": "interface",
		"body": [
			"interface ${1/(.*)/${1:/capitalize}/} {",
			"  $2",
			"}"
		],
		"description": "Create Interface"
	},
	"Create Generic Interface": {
		"prefix": "interfaceGeneric",
		"body": [
			"interface ${1/(.*)/${1:/capitalize}/}<${2:T}> {",
			"  $3",
			"}"
		],
		"description": "Create Interface"
	},
	"Create Type Alias": {
		"prefix": "type",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = $2"
		],
		"description": "Create Type Alias"
	},
	"Create Object Type Alias": {
		"prefix": "typeObject",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = {",
			"  $2",
			"}"
		],
		"description": "Create Object Type Alias"
	},
	"Create Generic Type Alias": {
		"prefix": "typeGeneric",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}<${2:T}> = $3"
		],
		"description": "Create Generic Type Alias"
	},
	"Create Function Type Alias": {
		"prefix": "typeFunction",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = (${2:Params}) => ${3:Return}"
		],
		"description": "Create Function Type Alias"
	},
	"Mapped Type": {
		"prefix": "mappedType",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = {",
			"  [${2:key} in ${3:UnionType}]: ${4:Type}",
			"}"
		],
		"description": "Mapped Type"
	},
	"Attach as const in object value": {
		"prefix": "asconst",
		"body": [
			"as const"
		],
		"description": "Attach as const in object value"
	},
	"Define Map Type": {
		"prefix": "MapType",
		"body": [
			"Map<${1:KeyType}, ${2:ValueType}>"
		],
		"description": "Create Map Type"
	},
	"Create Map Instance": {
		"prefix": "newMap",
		"body": [
			"new Map<${1:Key}, ${2:Value}>(${3})"
		],
		"description": "Create Map Constructor"
	},
	"Define Set type": {
		"prefix": "SetType",
		"body": [
			"Set<${1:Type}>"
		]
	},
	"Create Set Instance": {
		"prefix": "newSet",
		"body": [
			"new Set<${1:Type}>(${2})"
		]
	}
}