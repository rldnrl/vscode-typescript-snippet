{
	"Create React Component with Interface": {
		"prefix": "irfc",
		"body": [
			"import React from 'react'",
			"",
			"interface ${1:${TM_FILENAME_BASE}}Props {",
			"  $2",
			"}",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}({$3}: ${1:${TM_FILENAME_BASE}}Props) {",
			"  return <div>${4:${TM_FILENAME_BASE}}</div>",
			"}",
			""
		],
		"description": "Create React Component with Interface"
	},
	"Create Arrow Function React Component with Interface": {
		"prefix": "irafc",
		"body": [
			"import React from 'react'",
			"",
			"interface ${1:${TM_FILENAME_BASE}}Props {",
			"  $2",
			"}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = ({$3}: ${1:${TM_FILENAME_BASE}}Props) => {",
			"  return <div>${4:${TM_FILENAME_BASE}}</div>",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			""
		],
		"description": "Create Arrow Function React Component with Interface"
	},
  "Create React Component with Type Alias": {
		"prefix": "trfc",
		"body": [
			"import React from 'react'",
			"",
			"type ${1:${TM_FILENAME_BASE}}Props = ${2}",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}(${3:props}: ${1:${TM_FILENAME_BASE}}Props) {",
			"  return <div>${4:${TM_FILENAME_BASE}}</div>",
			"}",
			""
		],
		"description": "Create React Component with Type Alias"
	},
  "Create Arrow Function React Component with Type Alias": {
		"prefix": "trafc",
		"body": [
			"import React from 'react'",
			"",
			"type ${1:${TM_FILENAME_BASE}}Props = ${2}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = (${3:props}: ${1:${TM_FILENAME_BASE}}Props) => {",
			"  return <div>${4:${TM_FILENAME_BASE}}</div>",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			""
		],
		"description": "Create React Component with Type Alias"
	},
	"Create React Context": {
		"prefix": "rfctx",
		"body": [
			"import React, { createContext, useContext, ReactNode } from 'react'",
			"",
			"type ${1/(.*)/${1:/capitalize}/}ContextType = {",
			"  ${2}",
			"}",
			"",
			"export const ${1/(.*)/${1:/capitalize}/}Context = createContext<${1/(.*)/${1:/capitalize}/}ContextType>(${3})",
			"",
			"export const use${1/(.*)/${1:/capitalize}/}Context = () => useContext(${1/(.*)/${1:/capitalize}/}Context)",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Props = {",
			"  children?: ReactNode",
			"}",
			"",
			"export default function ${1/(.*)/${1:/capitalize}/}Provider({ children }: ${1}Props) {",
			"  return <${1/(.*)/${1:/capitalize}/}Context.Provider value={{$4}}>{children}</${1}Context.Provider>",
			"}",
			""
		],
		"description": "Create React Context"
	},
	"Create useState": {
		"prefix": "useState",
		"body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})",
		"description": "Create useState"
	},
	"Create useState with Type": {
		"prefix": "tuseState",
		"body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:Type}>(${3:initialState})",
		"description": "Create useState with Type"
	},
	"Create useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
			"  $1",
			"}, [$2])",
			""
		],
		"description": "Create useEffect"
	},
	"Create useReducer State Type and State": {
		"prefix": "tstate",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}State = {",
			"  ${2}",
			"}",
			"",
			"const ${3}State: ${1/(.*)/${1:/capitalize}/}State = {",
			"  ${4}",
			"}",
			"",
		],
		"description": "Create useReducer Action Type"
	},
	"Create useReducer Action Type": {
		"prefix": "taction",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}Action = {",
			"  type: ${2};",
			"  payload: ${3};",
			"} | {",
			"   type: ${4};",
			"   payload: ${5}",
			"}",
			"",
		],
		"description": "Create useReducer Action Type"
	},
	"Create useReducer Reducer": {
		"prefix": "reducer",
		"body": [
			"const ${1}reducer = (state: ${2}State, action: ${3}Action) => {",
			"  switch(action.type) {",
			"    case \"${4}\":",
			"      return ${5}",
			"    default:",
			"      return state",
			"  }",
			"}",
			""
		],
		"description": "Create useReducer Reducer"
	},
	"Create useReducer": {
		"prefix": "useReducer",
		"body": [
			"const [${1:state}, ${2:dispatch}] = useReducer(${3}reducer, initial{$4}State)"
		],
		"description": "Create useReducer"
	},
	"Import React": {
		"prefix": "imr",
		"body": "import {$1} from 'react'",
		"description": "Import React"
	},
	"Create Custom Hook using useQuery": {
		"prefix": "crq",
		"body": "const use${1}Query = ($2) => useQuery($3, $4, $5)",
		"description": "Create Custom Hook using useQuery"
	},
	"Create useQuery using react-query": {
		"prefix": "useQuery",
		"body": [
			"const ${1:query} = useQuery(${2:queryKey}, ${3:asyncFn}, ${4:option})"
		],
		"description": "Create useQuery using react-query"
	},
	"Import and export default": {
		"prefix": "exp",
		"body": [
			"import $1 from $2",
			"",
			"export default $1"
		],
		"description": "Import and export default"
	},
	"Default As": {
		"prefix": "dfas",
		"body": "default as ${1}",
		"description": "Default As"
	},
	"Create Interface": {
		"prefix": "interface",
		"body": [
			"interface ${1/(.*)/${1:/capitalize}/} {",
			"  $2",
			"}"
		],
		"description": "Create Interface"
	},
	"Create Generic Interface": {
		"prefix": "interfaceGeneric",
		"body": [
			"interface ${1/(.*)/${1:/capitalize}/}<${2:T}> {",
			"  $3",
			"}"
		],
		"description": "Create Interface"
	},
	"Create Type Alias": {
		"prefix": "type",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = $2"
		],
		"description": "Create Type Alias"
	},
	"Create Object Type Alias": {
		"prefix": "typeObject",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = {",
			"  $2",
			"}"
		],
		"description": "Create Object Type Alias"
	},
	"Create Generic Type Alias": {
		"prefix": "typeGeneric",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}<${2:T}> = $3"
		],
		"description": "Create Generic Type Alias"
	},
	"Create Function Type Alias": {
		"prefix": "typeFunction",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = (${2:params}: ${3:Params}) => ${4:Return}"
		],
		"description": "Create Function Type Alias"
	},
	"Define Mapped Type": {
		"prefix": "mappedType",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = {",
			"  [${2:key} in ${3:UnionType}]: ${4:Type}",
			"}"
		],
		"description": "Define Mapped Type"
	},
	"Attach as const in object value": {
		"prefix": "asconst",
		"body": [
			"as const"
		],
		"description": "Attach as const in object value"
	},
	"Define Map Type": {
		"prefix": "MapType",
		"body": [
			"Map<${1:KeyType}, ${2:ValueType}>"
		],
		"description": "Define Map Type"
	},
	"Create Map Instance": {
		"prefix": "newMap",
		"body": [
			"new Map<${1:Key}, ${2:Value}>(${3})"
		],
		"description": "Create Map Instance"
	},
	"Define Set type": {
		"prefix": "SetType",
		"body": [
			"Set<${1:Type}>"
		]
	},
	"Create Set Instance": {
		"prefix": "newSet",
		"body": [
			"new Set<${1:Type}>(${2})"
		],
		"description": "Create Set Instance"
	},
	"Make all properties in Type optional.": {
		"prefix": "Partial",
		"body": [
			"Partial<${1:Type}>"
		],
		"description": "Make all properties in Type optional."
	},
	"Make all properties in Type required.": {
		"prefix": "Required",
		"body": [
			"Required<${1:Type}>"
		],
		"description": "Make all properties in Type required."
	},
	"Make all properties in Type readonly.": {
		"prefix": "Readonly",
		"body": [
			"Readonly<${1:Type}>"
		],
		"description": "Make all properties in Type readonly."
	},
	"Construct a type with a set of properties Keys of type Value.": {
		"prefix": "Record",
		"body": [
			"Record<${1:Keys}, ${2:Value}>"
		],
		"description": "Construct a type with a set of properties Keys of type Value."
	},
	"From Type, pick a set of properties whose keys are in the union Keys": {
		"prefix": "Pick",
		"body": [
			"Pick<${1:Type}, ${2:Keys}>"
		],
		"description": "From Type, pick a set of properties whose keys are in the union Keys"
	},
	"Exclude from Type those types that are assignable to Union": {
		"prefix": "Exclude",
		"body": [
			"Exclude<${1:Type}, {2:Union}>"
		],
		"description": "Exclude from Type those types that are assignable to Union."
	},
	"Construct a type with the properties of Type except for those in type Keys.": {
		"prefix": "Omit",
		"body": [
			"Omit<${1:Type}, {2:Keys}>"
		],
		"description": "Construct a type with the properties of Type except for those in type Keys."
	},
	"Extract from Type those types that are assignable to Union": {
		"prefix": "Extract",
		"body": [
			"Extract<${1:Type}, {2:Union}>"
		],
		"description": "Extract from Type those types that are assignable to Union"
	},
	"Exclude null and undefined from Type": {
		"prefix": "NonNullable",
		"body": [
			"NonNullable<${1:Type}>"
		],
		"description": "Exclude null and undefined from Type"
	},
	"Obtain the parameters of a function type in a tuple": {
		"prefix": "Parameters",
		"body": [
			"Parameters<${1:FuncType}>"
		],
		"description": "Obtain the parameters of a function type in a tuple"
	},
	"Obtain the return type of a function type": {
		"prefix": "ReturnType",
		"body": [
			"ReturnType<${1:FuncType}>"
		],
		"description": "Obtain the return type of a function type"
	},
	"Convert string literal type to uppercase": {
		"prefix": "Uppercase",
		"body": [
			"Uppercase<${1:StringLiteral}>"
		],
		"description": "Convert string literal type to uppercase"
	},
	"Convert string literal type to lowercase": {
		"prefix": "Lowercase",
		"body": [
			"Lowercase<$1{StringLiteral}>"
		],
		"description": "Convert string literal type to lowercase"
	},
	"Convert first character of string literal type to uppercase": {
		"prefix": "Capitalize",
		"body": [
			"Capitalize<${1:StringLiteral}>"
		],
		"description": "Convert first character of string literal type to uppercase"
	},
	"Convert first character of string literal type to lowercase": {
		"prefix": "Uncapitalize",
		"body": [
			"Uncapitalize<${1:StringLiteral}>"
		],
		"description": "Convert first character of string literal type to lowercase"
	}
}