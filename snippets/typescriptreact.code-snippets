{
	"Create React Component with Interface": {
		"prefix": "irfc",
		"body": [
			"import React from 'react'",
			"",
			"interface ${1:${TM_FILENAME_BASE}}Props {",
			"  $2",
			"}",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}({$3}: ${1:${TM_FILENAME_BASE}}Props) {",
			"  return <div>${4:${TM_FILENAME_BASE}}</div>",
			"}",
			""
		],
		"description": "Create React Component with Interface"
	},
  "Create React Component with Type Alias": {
		"prefix": "trfc",
		"body": [
			"import React from 'react'",
			"",
			"type ${1:${TM_FILENAME_BASE}}Props = {",
			"  $2",
			"}",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}({$3}: ${1:${TM_FILENAME_BASE}}Props) {",
			"  return <div>${4:${TM_FILENAME_BASE}}</div>",
			"}",
			""
		],
		"description": "Create React Component with Type Alias"
	},
	"Create React Context": {
		"prefix": "rfctx",
		"body": [
			"import React, { createContext, useContext, ReactNode } from 'react'",
			"",
			"type ${1/(.*)/${1:/capitalize}/}ContextType = {",
			"  ${2}",
			"}",
			"",
			"export const ${1/(.*)/${1:/capitalize}/}Context = createContext<${1/(.*)/${1:/capitalize}/}ContextType>(${3})",
			"",
			"export const use${1/(.*)/${1:/capitalize}/}Context = () => useContext(${1/(.*)/${1:/capitalize}/}Context)",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Props = {",
			"  children?: ReactNode",
			"}",
			"",
			"export default function ${1/(.*)/${1:/capitalize}/}Provider({ children }: ${1}Props) {",
			"  return <${1/(.*)/${1:/capitalize}/}Context.Provider value={{$4}}>{children}</${1}Context.Provider>",
			"}",
			""
		],
		"description": "Create React Context"
	},
	"Create useState": {
		"prefix": "useState",
		"body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${3:initialState})",
		"description": "Create useState"
	},
	"Create useState with Type": {
		"prefix": "tuseState",
		"body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:Type}>(${3:initialState})",
		"description": "Create useState with Type"
	},
	"Create useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
			"  $1",
			"}, [$2])",
			""
		],
		"description": "Create useEffect"
	},
	"Create useReducer State Type and State": {
		"prefix": "tstate",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}State = {",
			"  ${2}",
			"}",
			"",
			"const ${1}State = {",
			"",
			"} as ${1/(.*)/${1:/capitalize}/}State",
			"",
		],
		"description": "Create useReducer Action Type"
	},
	"Create useReducer Action Type": {
		"prefix": "taction",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}Action = {",
			"  type: ${2};",
			"  payload: ${3};",
			"} | {",
			"   type: ${4};",
			"   payload: ${5}",
			"}",
			"",
		],
		"description": "Create useReducer Action Type"
	},
	"Create useReducer Reducer": {
		"prefix": "reducer",
		"body": [
			"const ${1}reducer = (state: ${2}State, action: ${3}Action) => {",
			"  switch(action.type) {",
			"    case \"${4}\":",
			"      return ${5}",
			"    default:",
			"      return state",
			"  }",
			"}",
			""
		],
		"description": "Create useReducer Reducer"
	},
	"Create useReducer": {
		"prefix": "useReducer",
		"body": [
			"const [${1:state}, ${2:dispatch}] = useReducer(${3}reducer, initial{$4}State)"
		],
		"description": "Create useReducer"
	},
	"Import React": {
		"prefix": "imr",
		"body": "import {$1} from 'react'",
		"description": "Import React"
	},
	"Create Custom Hook using useQuery": {
		"prefix": "crq",
		"body": "const use${1}Query = ($2) => useQuery($3, $4, $5)",
		"description": "Create Custom Hook using useQuery"
	},
	"Import and export default": {
		"prefix": "exp",
		"body": [
			"import $1 from $2",
			"",
			"export default $1"
		],
		"description": "Import and export default"
	},
	"Create Interface": {
		"prefix": "interface",
		"body": [
			"interface ${1/(.*)/${1:/capitalize}/} {",
			"  $2",
			"}"
		],
		"description": "Create Interface"
	},
	"Create Generic Interface": {
		"prefix": "interfaceGeneric",
		"body": [
			"interface ${1/(.*)/${1:/capitalize}/}<${2:T}> {",
			"  $3",
			"}"
		],
		"description": "Create Interface"
	},
	"Create Type Alias": {
		"prefix": "type",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = $2"
		],
		"description": "Create Type Alias"
	},
	"Create Object Type Alias": {
		"prefix": "typeObject",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = {",
			"  $2",
			"}"
		],
		"description": "Create Object Type Alias"
	},
	"Create Generic Type Alias": {
		"prefix": "typeGeneric",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}<${2:T}> = $3"
		],
		"description": "Create Generic Type Alias"
	},
	"Create Function Type Alias": {
		"prefix": "typeFunction",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/} = ($2) => $3"
		],
		"description": "Create Function Type Alias"
	}
}